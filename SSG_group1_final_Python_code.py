#!/usr/bin/python
# -*- coding: utf-8 -*-

# -*- coding: utf-8 -*-

"""SSD_Amit .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JlZdFgrw2fWUpgJ19ixtREJQ1zWv7ToB
"""

import datetime  # used in dob def function
import base64  # used in BSN encryption
import os  # used in program exit function
import re
import pyotp  # Used for OTP generation
import sqlite3  # Database


def checkBSN(BSN):
    if len(BSN) == 11:  # expect 9 digit and 3 '-' sybmol total length is 11
        if BSN[3] == '-' and BSN[6] == '-':  # - required after 3 and 6 charater
            BSN = BSN.replace('-')
            for x in BSN:
                if not x.isdigit():  # validates for only numeric values
                    return False
            return True
        return False


# ------------------------------------------------
# Data of Birth format validation
# The expected format of DOB is 2020-11-20 (yyyy-mm-dd) and only numeric value are accepted
# Invalid input will ask the user to re-inter the dob

def birthvalidate(date_text):
    try:
        datetime.datetime.strptime(date_text, '%Y-%m-%d')  # DOB Validation format yyyy-mm-dd
        return True
    except ValueError:
        return False


# ------------------------------------------------
  # First and Last name Validation
  # The expected format are : a. Minimum two charaters and maximum fifteen charaters
  # Invalid input will ask the user to re-inter the First or Last Name

def namevalidate(name_text):
    if len(name_text) < 2 or len(name_text) > 15 or name_text.isalpha() \
        == False:

      # while True:
        # while name_text.isalpha() == False:

        return True
    return False


          # return False
# -------------------------------------------------
# Password length and format validation
# Expected input
  # a.Minimum 8 charater and all characters numric and one special charater are allowed

def passwordvalidate1(pass_text):
    if len(pass_text) < 8 or len(pass_text) > 15 or pass_text.isalnum() \
        == True:
        print( 'Password  Accepted')
        return False
    return True


# ----------------------------------------------

def Police_Add_Function():

# First name input

    name = input('Enter First Name \t\t:\t ')  # User input
    while namevalidate(name) == True:
        print ('First Name entered is too short or has number, Please enter alphabet only and minimum two letters')
        name = input('Enter First Name \t\t:\t ')

# Last name input

    lname = input('Enter Last Name \t\t:\t ')  # User input
    while namevalidate(lname) == True:
        print ('last Name entered is too short or has number, Please enter alphabet only and minimum two letters')
        lname = input('Please enter a name            : ')

# Date of Birth input

    dob = input('Enter Date of Birth (YYYY-MM-DD) :\t ')
    while birthvalidate(dob) == False:
        print ('Incorrect format.Enter in yyyy-mm-dd format\n ')
        dob = input('Enter Date of Birth YYYY-MM-DD')

# while BSN input entered correctly, the encryption process starts and stores the encrypted value to the database

    while True:
        yearsplit = dob
        splityear = yearsplit.split('-')
        username = name + splityear[0]
        print ('''Password should be 8 < 16 > characters long and contain atleast one letter from each set [A-Z][a-z][1-9][~!@#$%^&*]*****''')
        break
    while True:
        DOB_ENCRYPT = dob.encode('ascii')
        base64_dob = base64.b64encode(DOB_ENCRYPT)
        base64_enc_dob = base64_dob.decode('ascii')
        break

    # While Password input entered correctly, the encrcryption process starts and store the encrypte value to the database

    password1 = input('Enter Password\t\t\t:\t ')  # (Minimum 8 charater and all characters numric and special charater are allowed):")
    while passwordvalidate1(password1) == False:
        print ('Password didnt meet the criteria ')
        password1 = \
            input('Minimum 8 charater and all characters numric and special charater are allowed :'
                  )
    while True:
        PASS_ENCRYPT = password1.encode('ascii')
        base64_pass = base64.b64encode(PASS_ENCRYPT)
        base64_enc_pass = base64_pass.decode('ascii')
        break

# BSN input and validation
# BSN format validation loop, loop will exit once valid input entered in 111-11-1111

    BSN = str(input('Enter 9-digit BSN (111-11-1111)\t:\t'))
    while checkBSN(BSN) == False:
        BSN = \
            str(input('Enter BSN Number in the format 111-11-1111 9 Digit : '
                ))

# while the BSN input entered correctly , the encyrption process starts and stores the encrypted value to the database

    while True:
        BSN_ENCRYPT = BSN.encode('ascii')
        base64_BSN = base64.b64encode(BSN_ENCRYPT)
        base64_enc_BSN = base64_BSN.decode('ascii')
        break

# Address input

    address = input('Enter Address\t\t\t:\t ')
    while len(address) < 5 or len(address) > 50:  # Length of the address is verified, name should be min of 5 and max of 50
        print ('Address must be between 5 and 50 characters long.')
        address = input('Please enter a address     : ')
    while True:
        address_encrypt = address.encode('ascii')
        base64_address = base64.b64encode(address_encrypt)
        base64_encrypt_address = base64_address.decode('ascii')
        break

# City input

    city = input('Enter City\t\t\t:\t ')
    while len(city) < 2 or len(city) > 20:  # Length of the city is verified, name should be min of 2 and max of 20
        print ('City must be between 2 and 20 characters long.')
        city = input('Enter City\t\t\t:\t ')
    while True:
        city_encrypt = city.encode('ascii')
        base64_city = base64.b64encode(city_encrypt)
        base64_encrypt_city = base64_city.decode('ascii')
        break
    zip = input('Enter ZIP code\t\t\t:\t ')
    while len(zip) < 4 or len(zip) > 10:  # Length of the city is verified, name should be min of 2 and max of 20
        print ('Zip must be between 4 and 10 characters long.')
        zip = input('Enter ZIP code\t\t\t:\t ')

# All the input data writen to the file "securerepo.db"

    connection = sqlite3.connect('securerepo.db')
    cursor = connection.cursor()
    cursor.execute('CREATE TABLE if not exists private (name TEXT, lname TEXT, dob TEXT, password1 TEXT, BSN char(30), address TEXT)'
                   )
    cursor.execute("""
    INSERT INTO private (name,lname,dob,password1,BSN,address ) \
    VALUES (?,?,?,?,?,?)"""
                   , (
        name,
        lname,
        base64_enc_dob,
        base64_enc_pass,
        base64_enc_BSN,
        address,
        ))
    print ('\nCongrats, Registration Successful !!!')
    connection.commit()
    print ('Record created successfully\n')
    connection.close()


def PoliceValidatefunction():
    verifyuser = input('Enter your First_Name\t\t:\t')
    verifypassd = input('Enter your Password\t\t:\t')
    connection = sqlite3.connect('securerepo.db')
    print ('\nOpened database successfully!!!')
    print ('Validating the user...\n')
    cursor = \
        connection.execute('SELECT name,lname,dob,password1,BSN,address FROM private WHERE name=? '
                           , (verifyuser, ))
    rows = cursor.fetchall()
    for row in rows:
        decryptpass = row[3]
        base64_message = decryptpass
        base64_bytes = base64_message.encode('ascii')
        message_bytes = base64.b64decode(base64_bytes)
        cleartxt_pass = message_bytes.decode('ascii')
    if not cleartxt_pass == verifypassd:
        print ("User Doesn't Exist\n")
    else:
        totp = pyotp.TOTP('base32secret3232')
        print ('\nYour OTP is:', totp.now())
        userOTP = input('\nEnter the OTP to validate : ')
        if totp.verify(userOTP) == True:
            print ('\n*************************Login Successful!!!*************************')
            print ('''You can continue to check/update the case  !''')
            while True:
                print ('**************Login successfully *************************\n')
                print ('')
                print ('\nPress a to New Police Member Registration\t:\t')
                print ('Press b for Existing Police Login..\t\t:\t')
                print ('Press c to Search Crime case..\t\t\t:\t')
                print ('Press d to Modify Crime case..\t\t\t:\t')
                print ('Enter 5 to Return to main Menu')
                print ('**********************************************************')
                ch = input('Enter Your Choice\t\t:\t ')
                if ch == 'a':
                    Police_Add_Function()
                if ch == 'b':
                    PoliceValidatefunction()
                if ch == 'c':
                    Crime_search_Function()
                if ch == 'd':
                    Crime_update_Function()
                if ch == '5':
                    return
                elif ch == 'd':
                    os._exit(os.EX_OK)
        else:
            print ('OTP does not match, Try again !!!')
    connection.close()


def PoliceLoginfunction():
    while True:
        print ('\nPress a to New Police Member Registration\t:\t')
        print ('Press b for Existing Police Login..\t\t:\t')
        print ('Press c to Search Crime case..\t\t\t:\t')
        print ('Press d to Modify Crime case..\t\t\t:\t')
        print ('Enter 5 to Return to main Menu')
        print ('**********************************************************')
        ch = input('Enter Your Choice\t\t:\t ')
        if ch == 'a':
            Police_Add_Function()
        if ch == 'b':
            PoliceValidatefunction()
        if ch == 'c':
            Crime_search_Function()
        if ch == 'd':
            Crime_update_Function()
        if ch == '5':
            return
        elif ch == 'd':
            os._exit(os.EX_OK)


def Crime_update_Function():
    userupdate = input('Enter the user to be updated\t:\t')
    newstatus = input('Enter the new Status\t\t:\t')
    connection = sqlite3.connect('securerepo.db')
    print ('\nOpened database successfully!!!')
    cursor = \
        connection.execute('UPDATE public SET status=? WHERE name=?',
                           (newstatus, userupdate))
    connection.commit()
    print ('Data has been updated successfully!!!')
    connection.close()


def Crime_search_Function():
    usersearch = input('Enter the user to search\t:\t')
    connection = sqlite3.connect('securerepo.db')
    print ('\nOpened database successfully!!!')
    print ('Fetching case details...\n')
    cursor = \
        connection.execute('SELECT name,lname,dob,password1,BSN,address,doc,dor,complaint,status,casenumber FROM public WHERE name=?'
                           , (usersearch, ))
    rows = cursor.fetchall()
    for row in rows:
        decryptdob = row[2]
        base64_message = decryptdob
        base64_bytes = base64_message.encode('ascii')
        message_bytes = base64.b64decode(base64_bytes)
        cleartxt_dob = message_bytes.decode('ascii')
        splitmask = cleartxt_dob.split('-')

  # BSN Decrypt process

        decryptBSN = row[4]
        base64_message = decryptBSN
        base64_bytes = base64_message.encode('ascii')
        message_bytes = base64.b64decode(base64_bytes)
        cleartxt_BSN = message_bytes.decode('ascii')
        splitmask = cleartxt_BSN.split('-')
        BSNsearch = splitmask[2]
        print ('------------------------------------------------')
        print ('        Here are the Case details of', usersearch)
        print ('------------------------------------------------')
        print ('Name\t\t\t:\t ', row[0], '', row[1])
        print ('Date_Of_Birth\t\t:\t ', cleartxt_dob)
        print ('BSN\t\t\t:\t ', 'xxx-xx-', BSNsearch)
        print ('Address\t\t\t:\t ', row[5])
        print ('Date_Of_Crime\t\t:\t ', row[6])
        print ('Date_Of_Registration\t:\t ', row[7])
        print ('Complaint\t\t:\t ', row[8])
        print ('Case Status\t\t:\t ', row[9])
        print ('Case Number\t\t:\t ', row[10], '\n')
    print ('Data has been Fetched successfully!!!\n')
    connection.close()


def Loginfunction():
    verifyuser = input('Enter your First_Name\t\t:\t')
    verifypassd = input('Enter your Password\t\t:\t')
    connection = sqlite3.connect('securerepo.db')
    cursor = \
        connection.execute('SELECT name,lname,dob,password1,BSN,address,doc,complaint,status,casenumber FROM public WHERE name=?'
                           , (verifyuser, ))
    print ('**********************************************************')
    print ('\nOpened database successfully!!!')
    print ('Validating the user...\n')
    rows = cursor.fetchall()
    for row in rows:
        decryptpass = row[3]
        base64_message = decryptpass
        base64_bytes = base64_message.encode('ascii')
        message_bytes = base64.b64decode(base64_bytes)
        cleartxt_pass = message_bytes.decode('ascii')
    if not cleartxt_pass == verifypassd:
        print ("User Doesn't Exist\n")
    else:
        totp = pyotp.TOTP('base32secret3232')
        print ('\nYour OTP is:', totp.now())
        userOTP = input('\nEnter the OTP to validate : ')
        if totp.verify(userOTP) == True:
            print ('\n*************************Login Successful!!!*************************')
            print ('''You can continue to check the case status !''')
            while True:

#                             print("**************Login successfully *************************")

                print ('')
                print ('**********************************************************')
                print ('Press a to search crime information\t:\t')
                print ('Press b to exit..\t\t:\t')
                print ('Enter 5 to Return to main Menu')
                print ('**********************************************************')
                ch = input('Enter Your Choice...\t:\t ')
                if ch == 'a':
                    Crime_search_Function()
                if ch == '5':
                    return
                elif ch == 'b':
                    os._exit(os.EX_OK)
        else:
            print ('OTP does not match, Try again !!!')
    connection.close()


def Crime_add_Function():

# First name input

    name = input('Enter First Name \t\t:\t ')  # User input
    while namevalidate(name) == True:
        print ('First Name enterned is too short or has number, Please enter alphabet only and minimum two letters')
        name = input('Enter First Name \t\t:\t ')

# Last name input

    lname = input('Enter Last Name \t\t:\t ')  # User input
    while namevalidate(lname) == True:
        print ('last Name entered is too short or has number, Please enter alphabet only and minimum two letters')
        lname = input('Please enter a name            : ')

# Date of Birth input

    dob = input('Enter Date of Birth (YYYY-MM-DD) :\t ')
    while birthvalidate(dob) == False:
        print ('Incorrect format.Enter in yyyy-mm-dd format\n ')
        dob = input('Enter Date of Birth YYYY-MM-DD')

# while BSN input entered correctly, the encryption process starts and stores the encrypted value to the database

    while True:
        yearsplit = dob
        splityear = yearsplit.split('-')
        username = name + splityear[0]
        print ('''Password should be 8 < 16 > characters long and contain atleast one letter from each set [A-Z][a-z][1-9][~!@#$%^&*]*****''')
        break
    while True:
        DOB_ENCRYPT = dob.encode('ascii')
        base64_dob = base64.b64encode(DOB_ENCRYPT)
        base64_enc_dob = base64_dob.decode('ascii')
        break

    # While Password input entered correctly, the encrcryption process starts and store the encrypte value to the database

    password1 = input('Enter Password\t\t\t:\t ')  # (Minimum 8 charater and all characters numric and special charater are allowed):")
    while passwordvalidate1(password1) == False:
        print ('Password didnt meet the criteria ')
        password1 = \
            input('Minimum 8 charater and all characters numric and special charater are allowed :'
                  )
    while True:
        PASS_ENCRYPT = password1.encode('ascii')
        base64_pass = base64.b64encode(PASS_ENCRYPT)
        base64_enc_pass = base64_pass.decode('ascii')
        break

# BSN input and validation
# BSN format validation loop, loop will exit once valid input entered in 111-11-1111

    BSN = str(input('Enter 9-digit BSN (111-11-1111)\t:\t'))
    while checkBSN(BSN) == False:
        BSN = \
            str(input('Enter BSN Number in the format 111-11-1111 9 Digit : '
                ))

# while the BSN input entered correctly , the encyrption process starts and stores the encrypted value to the database

    while True:
        BSN_ENCRYPT = BSN.encode('ascii')
        base64_BSN = base64.b64encode(BSN_ENCRYPT)
        base64_enc_BSN = base64_BSN.decode('ascii')
        break

# Address input

    address = input('Enter Address\t\t\t:\t ')
    while len(address) < 5 or len(address) > 50:  # Length of the address is verified, name should be min of 5 and max of 50
        print ('Address must be between 5 and 50 characters long.')
        address = input('Please enter a address     : ')
    while True:
        address_encrypt = address.encode('ascii')
        base64_address = base64.b64encode(address_encrypt)
        base64_encrypt_address = base64_address.decode('ascii')
        break

# City input

    city = input('Enter City\t\t\t:\t ')
    while len(city) < 2 or len(city) > 20:  # Length of the city is verified, name should be min of 2 and max of 20
        print ('City must be between 2 and 20 characters long.')
        city = input('Enter City\t\t\t:\t ')
    while True:
        city_encrypt = city.encode('ascii')
        base64_city = base64.b64encode(city_encrypt)
        base64_encrypt_city = base64_city.decode('ascii')
        break
    zip = input('Enter ZIP code\t\t\t:\t ')
    while len(zip) < 4 or len(zip) > 10:  # Length of the city is verified, name should be min of 2 and max of 20
        print ('Zip must be between 4 and 10 characters long.')
        zip = input('Enter ZIP code\t\t\t:\t ')

# Date of Crime input

    doc = input('Enter Date of Crime (YYYY-MM-DD) :\t ')
    while birthvalidate(dob) == False:
        print ('Incorrect format.Enter in yyyy-mm-dd format\n ')
        doc = input('Enter Date of Crime YYYY-MM-DD')

# Date of Crime Registration

    current_datetime = datetime.datetime.now()
    dor = current_datetime

# while BSN input entered correctly, the encryption process starts and stores the encrypted value to the database

    while True:
        yearsplit = doc
        splityear = yearsplit.split('-')
        username = name + splityear[0]
        break

# Complaint input

    complaint = input('Enter your complaint\t\t:\t ')
    while len(address) < 5 or len(address) > 500:  # Length of the address is verified, name should be min of 5 and max of 500
        print ('Address must be between 5 and 500 characters long.')
        address = input('Enter your complaint\t:\t ')
    while True:
        address_encrypt = address.encode('ascii')
        base64_address = base64.b64encode(address_encrypt)
        base64_encrypt_address = base64_address.decode('ascii')
        break

# Status

    status = 'In-Progress'
    while len(status) < 5 or len(status) > 50:  # Length of the status is verified, name should be min of 5 and max of 50

#            print("Status must be between 5 and 50 characters long.")

        status = 'In-Progress'

# Case Number

    totp = pyotp.TOTP('base32secret3232')
    casenumber = totp.now()
    print ('')
    print ('-------------------------------------------')
    print ('Complaint is registered successfully. Your Case Number is #', casenumber)
    print ('\nPlease note down your username -', name)
    while True:
        zip_encrypt = zip.encode('ascii')
        base64_zip = base64.b64encode(zip_encrypt)
        base64_encrypt_zip = base64_zip.decode('ascii')
        break

# All the input data writen to the file
    # securerepo.db

    connection = sqlite3.connect('securerepo.db')
    cursor = connection.cursor()
    cursor.execute('CREATE TABLE if not exists public (name TEXT, lname TEXT, dob TEXT, password1 TEXT, BSN char(30), address TEXT, doc TEXT, dor TEXT, complaint TEXT, status TEXT, casenumber INTEGER)'
                   )
    cursor.execute(""" lname,dob,password1,BSN,address,doc,dor,complaint,status,casenumber ) \
    VALUES (?,?,?,?,?,?,?,?,?,?,?)"""
                   , (
        name,
        lname,
        base64_enc_dob,
        base64_enc_pass,
        base64_enc_BSN,
        address,
        doc,
        dor,
        complaint,
        status,
        casenumber,
        ))
    print ('\nCongrats, Registration Successful !!!')
    connection.commit()
    print ('Record created successfully\n')
    connection.close()


# Complaint Search function
# Displays only selected field fromt the db table (Option 2)

while True:
    print ('***************************************')
    print ('Press 1 for New Complaint Registration...')
    print ('Press 2 for Existing user login')
    print ('Press 3 for Police Member login')
    print ('Press 4 for Exit')
    print ('****************************************')
    ch = input('Enter Your Choice [1 or 2 or 3]\t\t:\t')
    if ch == '1':
        Crime_add_Function()
    elif ch == '2':
        Loginfunction()
    elif ch == '3':
        PoliceLoginfunction()
    elif ch == '4':
        os._exit(os.EX_OK)
    else:
        print ('Invalid Selection...[1 or 2 or 3]  : ')
